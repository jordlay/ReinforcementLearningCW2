import numpy as np
import matplotlib.pyplot as plt
import gym
import sys
import torch
from torch import nn
from torch import optim

print("PyTorch:\t{}".format(torch.__version__))

# Create the neural network policy function approximator

class policy_estimator():
    def __init__(self, env):
        self.n_inputs = env.observation_space.shape[0]
        self.n_outputs = env.action_space.n
        
        # Define network
        self.network = nn.Sequential(
            nn.Linear(self.n_inputs, 16), 
            nn.ReLU(), 
            nn.Linear(16, self.n_outputs),
            nn.Softmax(dim=-1))
    
    def predict(self, state):
        action_probs = self.network(torch.FloatTensor(state))
        return action_probs
    
# print(env.observation_space.shape[0])
# print(torch.tensor(np.array([[1, 2, 3], [4, 5, 6]])))
# print(torch.tensor([[1., -1.], [1., -1.]]))

def discount_rewards(rewards, gamma=0.99):
    r = np.array([gamma**i * rewards[i] 
        for i in range(len(rewards))])
    # Reverse the array direction for cumsum and then
    # revert back to the original order
    r = r[::-1].cumsum()[::-1]
    return r - r.mean()

x = np.array([1,2,3,4])
x.cumsum()
x[::-1].cumsum()[::-1]

def reinforce(env, policy_estimator, num_episodes=100,
              batch_size=10, gamma=0.99):
    # Set up lists to hold results
    total_rewards = []
    batch_rewards = []
    batch_actions = []
    batch_states = []
    batch_counter = 1
    
    # Define optimizer
    optimizer = optim.Adam(policy_estimator.network.parameters(), 
                           lr=0.01)
    
    action_space = np.arange(env.action_space.n)
    ep = 0
    while ep < num_episodes:
        s_0 = env.reset()
        states = []
        rewards = []
        actions = []
        done = False
        while done == False:
            # Get actions and convert to numpy array
            action_probs = policy_estimator.predict(
                s_0).detach().numpy()
            action = np.random.choice(action_space, 
                p=action_probs)
            s_1, r, done, _ = env.step(action)
            
            states.append(s_0)
            rewards.append(r)
            actions.append(action)
            s_0 = s_1
            
            # If done, batch data
            if done:
                batch_rewards.extend(discount_rewards(
                    rewards, gamma))
                batch_states.extend(states)
                batch_actions.extend(actions)
                batch_counter += 1
                total_rewards.append(sum(rewards))
                
                # If batch is complete, update network
                if batch_counter == batch_size:
                    optimizer.zero_grad() # sets the gardients of all the optimized torch tensors to zero 
                    
                    state_tensor = torch.FloatTensor(batch_states)
                    reward_tensor = torch.FloatTensor(
                        batch_rewards)
                    # Actions are used as indices, must be 
                    # LongTensor
                    action_tensor = torch.LongTensor(
                       batch_actions)
                    #print(state_tensor)
                    
                    # Calculate loss
                    logprob = torch.log(
                        policy_estimator.predict(state_tensor)) # turns each probability tuple and ln of each value
                    #print(reward_tensor)
                    #print(policy_estimator.predict(state_tensor))
                    #print(logprob)
                    #print(torch.gather(logprob, 1, action_tensor.unsqueeze(1)).squeeze())
                    #print(action_tensor.unsqueeze(1))
                    #print(reward_tensor)
                    selected_logprobs = reward_tensor * \
                        torch.gather(logprob, 1, 
                        action_tensor.unsqueeze(1)).squeeze()
                    #print(torch.gather(logprob, 1, action_tensor.unsqueeze(1)))
                    
                    print(selected_logprobs)
                    #return 0
                    loss = -selected_logprobs.mean()
                    print(loss)
                    print("here")
                    
                    # Calculate gradients
                    print(loss.backward())
                    loss.backward() # calculates gradient of loss wrt parameters
                    # return 0
                    
                    # Apply gradients
                    optimizer.step()
                    
                    batch_rewards = []
                    batch_actions = []
                    batch_states = []
                    batch_counter = 1
                    
                avg_rewards = np.mean(total_rewards[-100:])
                # Print running average
                #print("\rEp: {} Average of last 100:" +   "{:.2f}".format(ep + 1, avg_rewards), end="")
                ep += 1
        print("total", total_rewards)
    return total_rewards

env = gym.make('CartPole-v1')
policy_est = policy_estimator(env)
rewards = reinforce(env, policy_est)

X = [x+1 for x in range(1000)]
plt.figure()
plt.plot(X, rewards)
plt.show()

# env = gym.make('CartPole-v1')
env.render()
s_0 = env.reset()
action_space = np.arange(env.action_space.n)


# for _ in range(20000):
    
#     action_probs = policy_est.predict(s_0).detach().numpy()
#     action = np.random.choice(action_space, p=action_probs)
#     s_0, r, done, _ = env.step(action)
    
    
env.close()